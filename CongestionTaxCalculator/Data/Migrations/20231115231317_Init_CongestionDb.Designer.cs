// <auto-generated />
using System;
using CongestionTaxCalculator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231115231317_Init_CongestionDb")]
    partial class Init_CongestionDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gothenburg"
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("Time(0)");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("Time(0)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 8m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 6, 0, 0, 0),
                            ToTime = new TimeSpan(0, 6, 29, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 13m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 6, 30, 0, 0),
                            ToTime = new TimeSpan(0, 6, 59, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 18m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 7, 0, 0, 0),
                            ToTime = new TimeSpan(0, 7, 59, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 13m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 8, 0, 0, 0),
                            ToTime = new TimeSpan(0, 8, 29, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 8m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 8, 30, 0, 0),
                            ToTime = new TimeSpan(0, 14, 59, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 13m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 15, 0, 0, 0),
                            ToTime = new TimeSpan(0, 15, 29, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 18m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 15, 30, 0, 0),
                            ToTime = new TimeSpan(0, 16, 59, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 13m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 17, 0, 0, 0),
                            ToTime = new TimeSpan(0, 17, 59, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 8m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 18, 0, 0, 0),
                            ToTime = new TimeSpan(0, 18, 29, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Amount = 0m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 18, 30, 0, 0),
                            ToTime = new TimeSpan(0, 23, 59, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            Amount = 0m,
                            CityId = 1,
                            FromTime = new TimeSpan(0, 0, 1, 0, 0),
                            ToTime = new TimeSpan(0, 5, 59, 0, 0)
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeeks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Ratio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpecialDates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DayOfWeeks = "[\r\n  6,\r\n  0\r\n]",
                            IsActive = true,
                            Name = "Weekends Free Tax For All",
                            Ratio = 0m,
                            SpecialDates = "[]",
                            VehicleTypes = "[\r\n  0\r\n]"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            DayOfWeeks = "[\r\n  6,\r\n  0,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5\r\n]",
                            IsActive = true,
                            Name = "Tax Exempt vehicles",
                            Ratio = 0m,
                            SpecialDates = "[]",
                            VehicleTypes = "[\r\n  9,\r\n  6,\r\n  3,\r\n  4,\r\n  7,\r\n  8\r\n]"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            DayOfWeeks = "[]",
                            ExpireTime = new DateTime(2013, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Holidays Free Tax For All",
                            Ratio = 0m,
                            SpecialDates = "[\r\n  \"2013-01-01\",\r\n  \"2013-03-28\",\r\n  \"2013-03-29\",\r\n  \"2013-04-01\",\r\n  \"2013-04-30\",\r\n  \"2013-05-01\",\r\n  \"2013-05-08\",\r\n  \"2013-05-09\",\r\n  \"2013-06-05\",\r\n  \"2013-06-06\",\r\n  \"2013-06-21\",\r\n  \"2013-11-01\",\r\n  \"2013-12-24\",\r\n  \"2013-12-25\",\r\n  \"2013-12-26\",\r\n  \"2013-12-31\",\r\n  \"2013-07-01\",\r\n  \"2013-07-02\",\r\n  \"2013-07-03\",\r\n  \"2013-07-04\",\r\n  \"2013-07-05\",\r\n  \"2013-07-06\",\r\n  \"2013-07-07\",\r\n  \"2013-07-08\",\r\n  \"2013-07-09\",\r\n  \"2013-07-10\",\r\n  \"2013-07-11\",\r\n  \"2013-07-12\",\r\n  \"2013-07-13\",\r\n  \"2013-07-14\",\r\n  \"2013-07-15\",\r\n  \"2013-07-16\",\r\n  \"2013-07-17\",\r\n  \"2013-07-18\",\r\n  \"2013-07-19\",\r\n  \"2013-07-20\",\r\n  \"2013-07-21\",\r\n  \"2013-07-22\",\r\n  \"2013-07-23\",\r\n  \"2013-07-24\",\r\n  \"2013-07-25\",\r\n  \"2013-07-26\",\r\n  \"2013-07-27\",\r\n  \"2013-07-28\",\r\n  \"2013-07-29\",\r\n  \"2013-07-30\",\r\n  \"2013-07-31\"\r\n]",
                            VehicleTypes = "[\r\n  9,\r\n  6,\r\n  3,\r\n  4,\r\n  7,\r\n  8\r\n]"
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TollStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Model = "M1",
                            Type = 1,
                            VehicleNo = "4574"
                        },
                        new
                        {
                            Id = 2,
                            Model = "M2",
                            Type = 6,
                            VehicleNo = "2488"
                        },
                        new
                        {
                            Id = 3,
                            Model = "B1",
                            Type = 9,
                            VehicleNo = "74878"
                        },
                        new
                        {
                            Id = 4,
                            Model = "B2",
                            Type = 1,
                            VehicleNo = "45454"
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.VehiclePassTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePassTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Time = new DateTime(2013, 1, 14, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Time = new DateTime(2013, 1, 15, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Time = new DateTime(2013, 2, 7, 6, 23, 27, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Time = new DateTime(2013, 2, 7, 15, 27, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 5,
                            Time = new DateTime(2013, 2, 8, 6, 27, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Time = new DateTime(2013, 2, 8, 6, 20, 27, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Time = new DateTime(2013, 2, 8, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Time = new DateTime(2013, 2, 8, 15, 29, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Time = new DateTime(2013, 2, 8, 15, 47, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 10,
                            Time = new DateTime(2013, 2, 8, 16, 1, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 11,
                            Time = new DateTime(2013, 2, 8, 16, 48, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 12,
                            Time = new DateTime(2013, 2, 8, 17, 49, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 13,
                            Time = new DateTime(2013, 2, 8, 18, 29, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 14,
                            Time = new DateTime(2013, 2, 8, 18, 35, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 15,
                            Time = new DateTime(2013, 3, 26, 14, 25, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 16,
                            Time = new DateTime(2013, 3, 28, 14, 7, 27, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 17,
                            Time = new DateTime(2013, 1, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 18,
                            Time = new DateTime(2013, 1, 5, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 19,
                            Time = new DateTime(2013, 1, 5, 8, 59, 27, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 20,
                            Time = new DateTime(2013, 1, 6, 10, 27, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 21,
                            Time = new DateTime(2013, 2, 7, 6, 27, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 22,
                            Time = new DateTime(2013, 2, 7, 6, 20, 27, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TaxRate", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Domain.City", "City")
                        .WithMany("TaxRates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TaxRule", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Domain.City", "City")
                        .WithMany("TaxRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.TollStation", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.VehiclePassTime", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Core.Domain.Vehicle", "Vehicle")
                        .WithMany("PassTimes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.City", b =>
                {
                    b.Navigation("TaxRates");

                    b.Navigation("TaxRules");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Core.Domain.Vehicle", b =>
                {
                    b.Navigation("PassTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
